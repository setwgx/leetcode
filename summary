1.二分查找法
int BinarySearch(int nums[], int n, int target)
{
    int left = 0; //两个指针表示搜索范围
    int right = n - 1;
    while (left <= right) { //循环条件
      int mid = left + ((right - left) >> 1); //可以防止溢出，移位提高效率，每次循环更新
      if(nums[mid] == target){ //找到目标
          return mid;
      }else if(nums[mid] > target){ //更改搜索范围
          right = mid - 1;
      }else{
          left = mid + 1;
      }
   }
   return -1; 
   //注释：同时可以尝试最后判断相等， 因为搜索中不等的情况会更多一些
}



2.位运算把二进制最低位改1为0
运算：n & (n - 1)，其运算结果恰为把 nn 的二进制位中的最低位的 11 变为 00 之后的结果。
如6 & (6-1) = 4，6=(110)，4=(100)，运算结果即把6的二进制中的最低位的1变为0之后的结果。
可以利用这个性质加速运算，运算次数等于n的二进制中1的个数。



3.位运算实现两数交换
一般交换两个变量的值通过一个临时变量用于暂存
int temp;
temp=x;
x=y;
y=temp;
采用位运算实现交换可以提高代码执行效率，即通过异或实现
x=x^y
y=x^y
x=x^y
下面做一个简单的证，为方便理解采用下标形式区分新旧x和y
x1=x0^y0
y1=x1^y0=x0^y0^y0=x0^0=x0
x2=x1^y1=x0^y0^x0=y0^0=y0



4.线性筛(合数晒->欧式筛->线性筛)
size=1001
v=[0]*size //v[i]表示素数i的最小质因子
prime=[0]*size //prime范围2-size之间的素数
cnt=0
for i in range(2, size): //
    if v[i]==0: //如果是素数，即没有被筛选到过
        v[i]=i
        prime[cnt]=i
        cnt+=1
    for j in range(cnt):
        if prime[j]>v[i] or prime[j]*i>=size: //超过范围的就不需要了
            break
        v[prime[j]*i]=prime[j] //被最小质因子筛去
print(prime)



